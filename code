#student name : OMAR MOHAMMED ABUALRUB
#student number : 160208
import pygame
from pygame.locals import *
import random


pygame.init()
pygame.mixer.init()

clock = pygame.time.Clock()
fps = 60

screen_width = 600
screen_height = 800

screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Flappy Bird')

# define font
font = pygame.font.SysFont('Bauhaus 93', 60)

# define colours
white = (255, 255, 255)

# define game variables
ground_scroll = 0
scroll_speed = 4
flying = False
game_over = False
pipe_gap = 150
pipe_frequency = 1500  # milliseconds
last_pipe = pygame.time.get_ticks() - pipe_frequency
score = 0
pass_pipe = False
coin_frequency = 3000 # milliseconds
attempts = 3
last_coin = pygame.time.get_ticks() - coin_frequency

score_sound = pygame.mixer.Sound('C:\\Users\\User\\Desktop\\Gameproject\\jump.wav')
game_over_sound = pygame.mixer.Sound('C:\\Users\\User\\Desktop\\Gameproject\\gameovers.mp3')
bullet_sound = pygame.mixer.Sound('C:\\Users\\User\\Desktop\\Gameproject\\bulletso.mp3')

# load images
bg = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\bg1.jpg')
ground_img = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\ground.png')
button_img = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\restart.png')
coin_img = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\bullet.png')
heart_img = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\heart.png')


def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    screen.blit(img, (x, y))

def draw_attempts(count):
    for i in range(count):
        screen.blit(heart_img, (20 + i * 40, 20))

def reset_game():
    pipe_group.empty()
    coin_group.empty()

    flappy.rect.x = 100
    flappy.rect.y = int(screen_height / 2)
    score = 0
    attempts = 3
    return score , attempts


class Bird(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        self.index = 0
        self.counter = 0
        for num in range(1, 4):
            img = pygame.image.load(f'C:\\Users\\User\\Desktop\\Gameproject\\nk{num}.png')
            self.images.append(img)
        self.image = self.images[self.index]
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]
        self.vel = 0
        self.clicked = False

    def update(self):

        if flying == True:
            # gravity
            self.vel += 0.7
            if self.vel > 8:
                self.vel = 8
            if self.rect.bottom < 768:
                self.rect.y += int(self.vel)

        if game_over == False:
            # jump
            if pygame.mouse.get_pressed()[0] == 1 and self.clicked == False:
                self.clicked = True
                self.vel = -10
            if pygame.mouse.get_pressed()[0] == 0:
                self.clicked = False

            # handle the animation
            self.counter += 1
            flap_cooldown = 5

            if self.counter > flap_cooldown:
                self.counter = 0
                self.index += 1
                if self.index >= len(self.images):
                    self.index = 0
            self.image = self.images[self.index]

            # rotate the bird
            self.image = pygame.transform.rotate(self.images[self.index], self.vel * -2)
        else:
            self.image = pygame.transform.rotate(self.images[self.index], -90)


class Pipe(pygame.sprite.Sprite):
    def __init__(self, x, y, position):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\pipe.png')
        self.rect = self.image.get_rect()
        # position 1 is from the top, -1 is from the bottom
        if position == 1:
            self.image = pygame.transform.flip(self.image, False, True)
            self.rect.bottomleft = [x, y - int(pipe_gap / 2)]
        if position == -1:
            self.rect.topleft = [x, y + int(pipe_gap / 2)]

    def update(self):
        self.rect.x -= scroll_speed
        if self.rect.right < 0:
            self.kill()


class Coin(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = coin_img
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]

    def update(self):
        self.rect.x -= scroll_speed
        if self.rect.right < 0:
            self.kill()


def create_coin():
    coin_y = random.randint(100, screen_height - 200)
    new_coin = Coin(screen_width, coin_y)
    coin_group.add(new_coin)


class Button():
    def __init__(self, x, y, image):
        self.image = image
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)

    def draw(self):

        action = False

        # get mouse position
        pos = pygame.mouse.get_pos()

        # check if mouse is over the button
        if self.rect.collidepoint(pos):
            if pygame.mouse.get_pressed()[0] == 1:
                action = True

        # draw button
        screen.blit(self.image, (self.rect.x, self.rect.y))

        return action


coin_group = pygame.sprite.Group()
bird_group = pygame.sprite.Group()
pipe_group = pygame.sprite.Group()

flappy = Bird(100, int(screen_height / 2))

bird_group.add(flappy)

# create restart button instance
button = Button(screen_width // 2 - 50, screen_height // 2 - 100, button_img)

def draw_attempts(count):
    heart_img = pygame.image.load("C:\\Users\\User\\Desktop\\Gameproject\\heart.png")
    heart_x = 10
    for _ in range(count):
        screen.blit(heart_img, (heart_x, 10))
        heart_x += 30

run = True
while run:

    clock.tick(fps)

    # draw background
    screen.blit(bg, (0, 0))

    bird_group.draw(screen)
    bird_group.update()
    pipe_group.draw(screen)
    coin_group.draw(screen)
    coin_group.update()

    # draw the ground
    screen.blit(ground_img, (ground_scroll, 700))

    # check the score
    if len(pipe_group) > 0:
        if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.left \
                and bird_group.sprites()[0].rect.right < pipe_group.sprites()[0].rect.right \
                and pass_pipe == False:
            pass_pipe = True
        if pass_pipe == True:
            if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.right:
                score += 1
                pass_pipe = False
                score_sound.play()
            if score > 5:
                bg = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\bg2.jpg')
                ground_img = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\ground1.png')

            if score > 10:
                bg = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\bg3.jpg')
                ground_img = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\ground2.png')
            high_score = 0
            if score > high_score:
                high_score = score

    draw_text(str(score), font, white, int(screen_width / 2), 20)

    # look for collision
    if pygame.sprite.groupcollide(bird_group, pipe_group, False, False) or flappy.rect.top < 0:
        if attempts > 0:
            attempts -= 1
            reset_game()
        else:
            game_over = True
            game_over_sound.play()



    # check if bird has hit the ground
    if flappy.rect.bottom >= 768:
        if attempts > 0:
            attempts -= 1
            reset_game()
        else:
            game_over = True
            game_over_sound.play()
        flying = False

    if game_over == False and flying == True:

        # generate new pipes
        time_now = pygame.time.get_ticks()
        if time_now - last_pipe > pipe_frequency:
            pipe_height = random.randint(-100, 100)
            btm_pipe = Pipe(screen_width, int(screen_height / 2) + pipe_height, -1)
            top_pipe = Pipe(screen_width, int(screen_height / 2) + pipe_height, 1)
            pipe_group.add(btm_pipe)
            pipe_group.add(top_pipe)
            last_pipe = time_now

        if time_now - last_coin > coin_frequency:
            create_coin()
            last_coin = time_now

        # draw and scroll the ground
        ground_scroll -= scroll_speed
        if abs(ground_scroll) > 35:
            ground_scroll = 0

        pipe_group.update()
        coin_group.update()
    if pygame.sprite.spritecollide(flappy, coin_group, True):
        if attempts > 0:
            attempts -= 1
            bullet_sound.play()

        else:
            game_over = True
            game_over_sound.play()


    # check for game over and reset
    if game_over == True:
        press_here_text = font.render('PRESS TO START', True, (255, 245, 99))
        screen.blit(press_here_text, (120, 370))

        game_over_text = pygame.image.load('C:\\Users\\User\\Desktop\\Gameproject\\gameover.png')
        screen.blit(game_over_text, (150, 100))

        draw_attempts(attempts)
        if button.draw() == True:
            game_over = False
            score , attempts = reset_game()
            game_over_sound.stop()

    draw_attempts(attempts)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        if event.type == pygame.MOUSEBUTTONDOWN and flying == False and game_over == False:
            flying = True

    if pygame.sprite.spritecollide(flappy, coin_group, True):
        if attempts > 0:
            attempts -= 1

        else:
            game_over = True
            game_over_sound.play()





    pygame.display.update()

pygame.quit()
